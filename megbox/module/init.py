import math
import warnings

from megengine import Tensor
from megengine.functional import clip
from megengine.module.init import uniform_

from ..functional.elementwise import erfinv


def trunc_normal_(
    tensor: Tensor, mean: float = 0.0, std: float = 1.0, a: float = -2.0, b: float = 2.0
) -> None:
    # Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf
    def norm_cdf(x):
        # Computes standard normal cumulative distribution function
        return (1.0 + math.erf(x / math.sqrt(2.0))) / 2.0

    if (mean < a - 2 * std) or (mean > b + 2 * std):
        warnings.warn(
            "mean is more than 2 std from [a, b] in nn.init.trunc_normal_. "
            "The distribution of values may be incorrect.",
            stacklevel=2,
        )

    # Values are generated by using a truncated uniform distribution and
    # then using the inverse CDF for the normal distribution.
    # Get upper and lower cdf values
    n = norm_cdf((a - mean) / std)
    u = norm_cdf((b - mean) / std)

    # Uniformly fill tensor with values from [n, u], then translate to
    # [2l-1, 2u-1].
    uniform_(tensor, 2 * n - 1, 2 * u - 1)

    # Use inverse cdf transform for normal distribution to get truncated
    # standard normal
    tensor.set_value(erfinv(tensor))

    # Transform to proper mean, std
    tensor *= std * math.sqrt(2.0)
    tensor += mean

    # Clamp to ensure it's in the proper range
    tensor.set_value(clip(tensor, lower=a, upper=b))
    return tensor
